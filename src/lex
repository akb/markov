

This reverts commit d9da2568fdd440c8cd5f87ea95f79f0e70bd4c02.


We want to point the data warehouse at the analytics-master-vip to
provide high availability. In the event of a hardware failure sfdb9011
will take over the mysql resource located on sfdb9010.


This reverts commit 2e011d64ff128af42e471741b9a81cd7b0896e68.

Now that the migrations are complete we want to turn on MSA.


Up till now only site admins have been able to add other campaign
leaders. This commit opens this functionality up to campaign leaders as
well. For now the only way to add leaders is still by ID, but this
should be changing soon.

Campaign leaders will now see a form to add new leaders by ID on the
admin/leaders page.



This upgrades us to the newest version of Rails 3.2. The only
incompatibility exposed by the specs was related to this change to


I fixed a minor incompatibility in our code and updated the relevant
specs, but this wouldn't have been a problem in real life anyway since
we never use units other than dollars on the site.





The percentage of users who take a position is up 10% relative to the
previous design (62% vs. 68%).

Given this data, close the experiment to the variant showing 5
positions, as users seem to be willing to answer that amount.



As we were first implementing this feature, we were only playing with
data that represented timings. Since we want an approximation of how
long a page took to render on the server, we wanted to use an average of
the timings for any given data point.

However, when we introduced counts (e.g. interactions), we actually want
the total number of interactions for any given data point, not the
average.

Therefore, we want to average timings and sum counts.

This commit accomplishes this distinction by adding 2 convenience
methods, pushTiming() and pushCount().


We had repeated the magic 930 number in too many places. This commit
DRYS that logic up so it is only in a single place in ruby-land,
allowing for a more modular, configurable implementation.


This adds warehouse_action_credit_silo to the staging database.yml so it
can be accessed through a staging tunnel.

There is also a lot of other DRYing up into two main categories of
config, for the application and for analytics. Hopefully this will make
the file more maintainable in the future.


In addition to adding a leader by Causes ID, we can now search by email
to add new leaders. Since we're opening up the add a leader
functionality to leaders and not just site admins the feature should be
easier to use. The site also now displays a flash error instead of
crashing if no user is found.

Campaign leaders can now be added by email in addition to Causes ID.



Using Square's Cubism.js[1], we have put together an extensible status
page that shows with high data density some key metrics. Cubism.js
interfaces with Graphite easily, which is where we happen to be
collecting a good amount of time-series metric data already.

Since we believe that the site's performance is very important, we chose
some performance-related metrics that were available in Graphite. These
are all the amount of time spent on the server during the Nagios checks
for these types of pages. Since these checks are only run once a minute,
the highest resolution graphs we can generate are 1 minute per pixel, or
currently 930 minutes (15.5 hours). We hope to add RUM soon, however,
which will give us better data with a higher resolution.

While were were putting metrics from Graphite on the page, we found some
potentially interesting interaction numbers to demonstrate how new
sections could be added.

This page is currently gated to site admins, but we hope to at some
point make it publicly accessible, potentially with a subset of the
data, to improve transparency and accountability.






The bar chart placement code calculated spacing with the assumption that
each x-axis tick was already centered on each bar. Instead, each x-axis
tick is aligned with the right side of each bar.

To ensure each tick is centered, and that there is still adequate
spacing between bars, the placement code shifts all bars right by half a
column width, and then applies the spacing changes.



Set up the controller, view and spec for the controller used to display
system status.



When syncing stickers, the sync task found a modified sticker without
cloudinary metadata for dev. The task has automatically modified the yml
file to contain the correct metadata.


In this case, the padding-box box-sizing strategy was complicating what
we wanted to accomplish. By changing it back to content-box, I was able
to remove a lot of math and variables.



The campaign sources dashboard has a summary bar at the top where we
show a few numbers including the social lift and per-mechanism stats.

There's a new requirement which requires specific formatting of these
numbers based on the total.

If the total is greater than or equal to 10,000 then we should format
ALL the numbers in the short form (eg. 10K), otherwise we should format
ALL the numbers normally (eg. 10,000).

This is slightly different than our existing friendly_number helper
because we want this rule to apply based on the total and not the
individual numbers.

I've added a new helper method to handle this along with a spec.



Changes seem to be entirely bugfixes or optimizations.







The `HexFormat` linter doesn't make sense for email-related CSS since
some email clients don't support the shorthand form for hex colors.

Add a configuration file that disables it just for the email stylesheet
directory.


As of `0.13.0`, `scss-lint` supports a configuration system that
automatically loads `.scss-lint.yml` files in the directory of the file
being linted (or some ancestor directory).

The configuration added here enables all Compass-related lints (which
are disabled by default) and disables linting of CSS for plugins and
gift-card-related CSS (which is deprecated and scheduled to be removed
soon).


The vertical space between the chart and the content below it is a
little tight, this commit adds a little more breathing room below the
chart container.



There was a bug in the adapter converter method used to prepare data for
consumption by the dashboard chart library.

The bug was that sometimes there would be duplicate day entries for the
same mechanism.

The bug appeared when more than one source type of the same mechanism
was found in the same day.

Previously we weren't grouping like-mechanism source types together, so
when they went through the conversion process they appeared as separate
entries.

This commit fixes that and also cleans up another small bug (unnecessary
each_with_index with duplicate 'i')



Introducing the campaign header on admin pages broke the ability to
add a photo to a draft campaign. This was because the campaigns/photos
controller creates a blank Photo record for a campaign with no photo.
When the header attempted to create a background photo out of this blank
record it crashed.

I added a check to the campaign_header partial which will only add the
background image when the campaign's photo is not a new record.


When coding this metric initially, we relied upon
wanted. However, upon closer inspection, ACCEPTED_STATUSES is 'A' and
'P' (indirect acceptance), whereas we actually want 'A' and 'I'
(ignored).

Rather than introducing a new constant array on the deprecated
OldInvitation model or adding the first to the tidy Invitation model, I
chose to make the array here. If we need a similar concept elsewhere, we
should move it to the new invitation model.



* Add a .presence? guard
* Add a shared instance variable for source_data instead of



The dashboard visualization dashboard data adapter has a few methods
which rely on the source classifier. Previously we were pulling ad hoc
data from the action credits table.

We've since build out a fact table to aggregate and store some of this
information for faster retrieval. This is accessed via an interface

This commit makes use of this source class in the adapter for the total
actions taken by source type method.

There are no logical changes here, the output should be the same, but
should be returned to the client faster in theory.



Shinal (sadly) no longer works here, so she won't be needing her site
admin powers any longer.


Specs for untaking an action don't actually test its side-effects but
only the residual state after untaking. Refactor them to use `expects`
instead.



The legend in the traffic attribution graph is broken. The color swatchs
don't show and the formatting is wrong.

This commit includes the relevant stylesheet.



The dashboard visualization dashboard data adapter has a few methods
which rely on the source classifier. Previously we were pulling ad hoc
data from the action credits table.

We've since build out a fact table to aggregate and store some of this
information for faster retrieval. This is accessed via an interface

This commit makes use of this source class in the adapter for the top
action taken sources method.

There are no logical changes here, the output should be the same, but
should be returned to the client faster in theory.



The dashboard visualization dashboard data adapter has a few methods
which rely on the source classifier. Previously we were pulling ad hoc
data from the action credits table.

We've since build out a fact table to aggregate and store some of this
information for faster retrieval. This is accessed via an interface

This commit makes use of this source class in the adapter for the social
lift method.

Future commits will make similar changes for the other methods.

There are no logical changes here, the output should be the same, but
should be returned to the client faster in theory.



activity_id parameter. This parameter accepts both single activity IDs
and arrays of activity IDs.

This wasn't very obvious based on the parameter name and the method
comments.

This commit changes it so it's a little more clear.

This is purely a refactor commit and doesn't change any logic.



The campaign sources dashboard has a table that shows top recruiters per
activity.

This commit adds the total number of dollars inspired next to the
recruiter's name if the action is a donation.

Since we can't join action credits to donations, this was done as a
separate queries. For each recruiter we fetch the IDs of all donations
they inspired, then we add up the amounts for those donations.

I couldn't think of a way to do the donation id fetching per recruiter
in a single commit. There might be a way with grouping, but I'm too
tired to think of it now.

Most of the time in this commit was spent trying to get donations to
work in the specs (it was non-obvious). After ack-ing for a few minutes
through a bunch of files I finally found a way.

(Site Admin) You'll now see a dollar amount next to recruiters in the
campaign sources dashboard top recruiters table for donation activities.



There were two ORM typos that made it out in 906a4eeef (my bad). This
fixes them and includes a smoke-test for BasicDataPointFetcher that
would have caught the error automatically had it previously existed.


This number almost never changes and it provides little value. It is a
major factor to the fact that rendering campaign updates in the sidebar
is responsible for 38% of time spent on the server when rendering the
action detail page.



By doing this, we can pre-load likes, comment threads, and post
references, essentially turning 3N+1 queries into 4.

I removed an implicit `to_a` on an AR collection. This was done to avoid
a `COUNT(*)` query to happen further down when we checked the length of
the returned collection of updates. To me this was a smell, so to be
more explicit about the fact that we want to avoid the count query, I
changed to a `.length` instead of a `.count`.

There is one more query to be eliminated from the rendering phase of
updates (getting the "#2" to appear). I'll handle that in an upcoming
commit.



At the moment we are using dummy data; we need to plug-in real per-day
data.

The x accessor has been changed format the time string given by the
server. This could be improved by converting all date strings to `Date`
objects on initialization.

This commit also removes the test data generation.



We want to show 30 days worth of data without scrolling in the chart.
This commit adjusts the variable width  dimension initialization methods
to accommodate 30 bars by default.

This commit also fixes a bug in the constant dimension initializer.



This makes these styles more consistent with our implementation
strategy.



The footer ad height was too short, causing the ad to poke outside of
its container. This commit gets the variables in order to set the
heights correctly.



We are replacing the old Causes template on campaign admin pages with
the same small campaign header layout that we use on campaign subpages.

This story was about updating the desktop styles. Pivotal story 60204104
some changes to mobile. For now these new styles apply to both
desktop and mobile, and a future commit will update the mobile styles.



Supporting a person is different from supporting an organization. We
want only person-supporting to count for this Supporter Network metric.

This is a tweak to the definition of

Note that since the data is non-backwards-compatible, I added a data
point cutoff so that the old data is no longer reported. I will manually
backfill the data once the dust settles on the various metric
definitions, and move the cutoff backward at that point.



Instead of having to pass in a collection of `User` objects to
`Campaign#preload_scorecards`, we pass in an array of user ids. This
avoids an unnecessary query in some situations.



Exporting via CSV is not intended to be a feature of BasicDataPoints,
but it helps for QA purposes to see historical data points as a CSV.

I will not be dismayed if the general reaction to this is "Let's not
introduce code into master that is only for one-off data pulls", but I
think that this functionality will be increasingly useful for QA
dashboards.


This commit fixes the `content published` metric so that instead of
looking just at the `created_at` timestamp of a post to determine its
published date, the metric now also considers the `launched_at` date
of the associated campaign. This makes sense, since `published at`
should be considered the date when content goes public.




This commit ensures all metrics (as shown in dashboards, etc) relating

For a given `date` (a single day) --

A user is considered a `partner` if

A campaign is considered a `partner campaign` if

An activity is considered a `partner activity` if

This commit updates all basic data point fetchers to use this
definition and adds specs.




This commit fixes the `partner` trait on the User factory. Previously,



This thing had a bug when multiple UTM tuples mapped to the same
source; instead of adding the counts for the same source they
replaced.  This commit fixes the issue so multiple UTMs ->
same source -> additive counts.


In service of simplifying the legend rendering, we are not avoiding
laying out and drawing the legend using SVG. Instead it is rendered
completely with regular HTML elements.

Now the legend consists of a `graph-legend-item` container, and within
it there is a checkbox, a container for the swatch, and a label.

Clicking on the checkbox now toggles groups in the graph. `redrawLegend`
has been removed because the checked stated of the checkbox now handles
that.



We want to present the members with friendly labels for the chart
legend. This commit modifies the chart accessor to use the `legend` hash
in the data object rather than the raw data label.

This commit also moves the generation of fake data to the initialize.



This commit moves the victory update and header for campaign subpages
into a layout. All campaign subpages will now use this layout, which
takes a `title_context` param which is the text displayed above the
campaign title. Examples would be 'Updates from the campaign to' or
'Campaign dashboard for'.

This work is in preparation for using the campaign subpage layout on
campaign admin pages. Having this as a reusable layout will make it
easier to apply across the site.

This commit should cause no user-facing changes to the site.



Since our Career page's title is now "Careers", we should match the URL
as well.



When the graph is scrollable, we never want the y-axis to scroll out of
view. To prevent this, we can fix the position of the y-axis to the left
side.

This commit achieves the fixed axis by rendering the graph and the
y-axis in separate containers. The axis container is then styled with

This commit also removes unused container variables, and groups related
code better.



We use the `genuine?` helper to decide whether to record UserLocation
and last_email_activity for a user. A user is currently considered
"genuine" when they're logged in and are not spoofing. This commit
changes `genuine?` to return true when a user is spoofing as an account
that they administer.



The dashboard visualization data adapter has a method which converts a
day-keyed hash into a format suitable for consumption by the charting
library (which is array-based).

Previously we'd only include records for the days that had data.

It turns out we need to also include all days within the given time
range.

This commit updates the converter function so that it pads all the extra
days.

This is done by going through the time range and adding all the days
that aren't already in the array, and then sorting the array by the days
(which is how the format is supposed to be).

This data structure is starting to smell a little, it feels overly
complex and redundant (eg. it's an array of arrays and a lot of the
times and mechanisms are repeated). It would be worth trying to get this
simplified by using hashes whose keys are the days (or mechanism). It
would simplify this date padding as well as the overall conversion.



The time window for the TOMS ad takeover to be live has closed. We can
now safely delete this code.



I accidentally typo'd the previous version of the crontab so it would
only run on Sundays.


The distressed effects in vector were absolutely massive. Fixing.



Jobs has been changed to Careers


`ActionsHelper#track_mixpanel_saw_action`, unlike all the other
similarly named methods in `ActionsHelper`, only tracks conditionally.
If the user has already taken action, or if the action is expired, the
event isn't tracked.

I updated this method's name to `#maybe_track_mixpanel_saw_action`, and
created a method `#track_mixpanel_saw_action` that always tracks. The
maybe version calls the non-maybe version. Method calls from controllers
and views to track saw action prompt events should now call
`#maybe_track_mixpanel_saw_action` to retain the previous behavior.


The current sticker is pretty hard to read as #givingtuesday is
written on one line in a square box and the symbol is very small.
This improved design fixes that.


Updating stats for certain newsletters, i.e. those with FollowSource
steps, is incredibly expensive. These jobs appear to be taking longer
and longer adding a lot of unnecessary load on the database server.

This commit should be reverted once the story is delivered.



The campaign sources dashboard has a couple of tables that show data
about sources of actions taken.

There are a few different sources used here. For revenue partners we
don't want to show all the sources, instead we want to group some of
them into a smaller set.


These rules are applied inside the source classifier if it's initialized
with a 'group_seed_by_email' flag set to 'true'.

While the new rules are simple on their own, they required some
restructuring of the code to keep things sane.

Basically the goal was to add this functionality without having too many
classes know about this conditional forking.

So we've added the forking into separate methods in the classifier.

In addition to the tuple classification forking, we also needed to
conditional tweak the hash which stores all source types. In most cases
we want to get ALL source types (including the new ones). But, in some
cases we want only the 'filtered' version, which is why the new method
was added for this case. This makes it so that when we pad in all the
source types we don't add the ones that were grouped.

In order to make use of the classifier's new conditional instance
variable, we did away with all the class methods in the classifier. This
required some refactoring in other code that was relying on these
methods.

In order to get the data visualization adapter (DVA) working with this
new conditional grouping, we also turned each of its methods into
instance methods and created an initializer which creates a single
classifier that is shared with all methods (this way we the caller can
pass in a custom classifier with the optional flag set). This allows the
DVA to remain agnostic of these changes (since only the classifier knows
about them).

These changes to the DVA in turn required other changes to the code to
use the new instance-based approach.

There were also some specs modified/added to test this new classifier
conditional.

My understanding behind this change is that we want to hide some of our
internal details for revenue partners, particularly the fact that we use
TrialPay to get some of these actions taken.

(Revenue Partner) You'll notice some of the campaign source dashboard
non-email.



There was a bug where organizers were able to send supporter emails
based on campaigns that weren't launched yet. This commit fixes that.

We don't render the form if the campaign is not launched. In addition,
we put a guard in the #create action in case someone tries to hack and
POST directly.



This is a followup to 06f06b66a87558dcdd25e8e8a6bcb525918c78e6, which
added some specs that shared a lot of code.

* Extract methods for finding forms/links that point to a particular

* Add an RSpec matcher for asserting that a given URL has specific query

* Add a memoized #page helper for controller specs that parses


repeated a number of times. This DRYs up the code into shared methods,
one for metrics that are simple integers, and one for metrics that are
the percentage of one metric compared to another metric.

This also fills in the names of the future metrics we will eventually
measure, including a fractional type which displays social-lift-like
numbers, i.e. "1.33".



This adds an empty page for the campaigns dashboard. Metrics soon to
come!

This also adds some links and routes so admins can get around these
pages.



This commit adds two new metrics to the basic data fetcher so that we
can calculate "actions per share", which is the campaign team's
quality metric.



'Careers and Jobs' was odd and redundant. Fixing.



This experiment places a link in action-taking flash messages which
allows the user to undo taking the action. Undo rates were sufficiently
low to warrant proceeding with this design, so we're closing the
experiment in favor of the treatment group.



EmailPreviews were using references to PostMailer#Update, which moved to
ZoeMailer#generic_campaign_mail in ce0e78a. This was causing previews to
have hard 500 errors, and generating an error message in the Email
Playground (/admin/email).

This is a smelly fix; these email preview methods are essentially
re-implementing the mailer methods that they are previewing, which is
why they end up calling into the `generic_campaign_mail` method instead
of the more specific mailer methods (which is what is called inside the
mailers). This is a DRY violation, and it was using a very generic
method name ('update') which made this very difficult to spot during the
initial refactor.



so that at least we can determine if all of the required fetcher
methods are defined on the fetcher object.

Also added a factory for Experiment and refactored the FactoryGirl


While moving this code, I seem to have erroneously omitted the class
methods that were serving as the public interface.

This series of errors suggests that this tool is seriously lacking in
the testing department (which keeps giving me the +1 Verified mark). I
am going to add specs shortly, but for now this is just aiming to get
the tool functional.

Also added is a stub to PostMailer to catch any in flight async jobs
that might be expecting to find the method there.


These stats are often buggy and not reliable. We have no plans to invest
more work in these reports but they should at least not lie.

I removed these sections from the email, the generation of impressions
data in the CauseWeeklyReport, the `.activity_impressions` method from
the MixpanelClientWrapper, all references to these impressions in the
mailer and lib specs, and the entire spec for the MixpanelClientWrapper,
since the entire file was testing the removed method.



The skip to next page link on the new follow page (support the leader
page) was left aligned. This commit fixes it to be centered.


We use mixpanel to track when users see a prompt to take action on the
campaigns show page. We were not tracking this on the personal campaign
show page. I added mixpanel tracking to the personal campaign show page
to track when a user sees this action prompt.



The first one was a bone-headed mistake, born of trying to move too
quickly.

The second is that there is a new class of error where the `reach`
method enqueues `reach!`, which is now also stubbed.


This commit adds unique tracking params to user post emails. The goal is
to have these tracking params available in trending post emails, but
since all user post emails use the same templates, the result will be
that all user post emails will contain new tracking params.

In order to not have our params overridden we use utm_content, which we
have not yet been using. The link to the post from the cta, the
secondary call to action, and the post preview all have unique params
now.



When this moved out of the PostMailer in ce0e78a, one reference wasn't
renamed appropriately.


considering that there would be jobs in flight to calculate statistics
that don't know that the code has moved.

Adding a shim in PostMailer to catch these jobs will clean up some
Sentry errors that would otherwise retry for days.


This reverts commit 7a5b2cb02452914b47dfd1f9f6edfaceb6a5f389.


This fixes an off-by-one error affecting all percentiles other than 0
and 100.



In commit a438fb2a, I moved most of the pre-loading for the post card
component into the component class itself. It turns out that some of



I also brought back a comment from 627e2d09 that helped understand why
every post has to reference the same in-memory campaign.



Commit d9e6169a9 (by me) removed two queries for each supporter in the
list of supporters in the sidebar of a profile page. But it did that by
introducing an expensive preload-query for campaigns followed by the
supporter. I was writing that code while blindly looking at the
query-counts going down, without realizing that I was reading all
supporters followed campaigns into memory.

This commit reverts that particular pre-loading. While I was in the
code, I moved the initialization of the supporter list to the controller
instead of inside the HAML file.

Sadly, we now reintroduce 2N+1 queries for this sidebar item. I hope to
come up with a better solution soon though. We can either lazy-load this
container, or implement a better preloading.



The script was doing a time range search [yesterday...today] to
find actions who had their deadline hit. This commit simply changes
this to [today..tomorrow] to send this email after the activity
hits its deadline.

I think we used to send this email early to give the user a chance
to extend. The way v2 actions work this is somewhat confusing (see
piv story for screen shots)



These classes have a bunch of shared code. DRY it up by extracting the
common methods into a superclass. The goal is to make it easier to
instrument these emails with experiment code without introducing one-off
hacks into each of these broadcasters, but instead by augmenting



A CustomActivityMail is a communication from an organizer to a targeted
segment of their supporters. The name 'CustomActivityMail' is
misleading, in that they may not actually relate to an Activity; one of
the available segments is "Your supporters who have not participated in
the Campaign".

Importantly, a CustomActivityMail is not a Post, and was adding a fair
amount of complexity to the PostMailer. To help separate these concerns
and make future work easier and more modular, I have moved this mailer
action into a new mailer, the EmailSupportersMailer.

This involved a little bit of dependency management. The reason that the
method was put into the PostMailer in the first place was to take
advantage of PostMailer#update, a generic method that provided an
abstraction where we only need to set up a hash with some options, and
it would take on the heavy lifting of rendering campaign mail. As this
seems more generally useful, I have hoisted it into the ZoeMailer parent
class, as ZoeMailer#generic_campaign_mail.


This commit increases the opacity of the actions panel when it is dimmed
(won and inactive campaigns) to improve legibility. Also added a
transition to the dimmed effect so that it is not so jarring on
mouseover.



We used to show a hard coded error message when there were validation
errors as a result of trying to send an email supporters email.

This was not very descriptive because you couldn't tell which field was
causing the error and why.

This is fixed by using the rails built in error strings.



When editing an official give activity, any validation error on donor
choices resulted in an exception. For reasons unknown to me, we are
manually propagating fundraising project errors up to the official give
activity itself. However, not all fundraising error keys are valid
activity error keys.

To avoid the issue without changing too much in a part of the codebase I
frankly don't comprehend, I'm simply munging the error keys to conform
to what I expect the give activity will accept.



Prior to this commit we were hiding a campaign's activities with an
`after_destroy` callback. This worked fine for most activities because
all the callback did was update the `hidden_at` attribute. With
`OfficialGiveActivities` however, there is a `before_save` callback that
throws an exception unless there is a cause or campaign. Updating the
`hidden_at` attribute of such an activity after destroying its campaign
caused this method to run when campaign was nil, causing an exception.
This resulted in any campaign with an `OfficialGiveActivity` as one of
its actions being unable to be deleted.

I changed `Campaign#hide_activities` to a `before_destroy` callback, to
make sure that activities being hidden still have access to their
campaign when updating.



When attempting to `bundle install` against Ruby `2.0.0-p353`, the
`debugger` gem would not build.



This appears to be fixed by upgrading `debugger` to `1.6.3`.


I set up sass-enhance[1] as an open source project for these mixins.
changes.





This fixes a bug in emailing results to the admin user when the recalc
script is finished.



This removes the active? check on campaigns when sending deadline hit
emails. Having that check would prevent single action campaigns from
receiving the deadline hit email.











This will make it easier for people to understand how we have things set
up and to find the most up-to-date documentation for this code.


This file came along for the ride the last time I upgraded Underscore,
but I had forgotten to commit it so it has just been hanging out in my
untracked files. To prevent others from having this problem if they were
to run bower install, I'm committing it.


This is a couple of basic follow-ups pointed out in code review.



We had before filters in place to ensure that only personal campaign
creators could edit their campaigns. This is no good. As site admins we
want our root privileges to extend everywhere!

As the before filter now checks for site-admin-ness and personal-
campaign-creator-ness, I changed its name to more accurately reflect
what it does. Then, in code review[1], Henric suggested that I re-use an
existing method to reduce duplication. In order to avoid having a
mouthful of a name for the before filter like
`must_be_able_to_edit_personal_campaign`, I went with Henric's
suggestion of renaming the `#can_edit?` method. The new name (`#admin?`)
matches the before filter, and also the method of the same name on the
Campaign model.




now work for site-admins looking at other people's personal campaigns.


